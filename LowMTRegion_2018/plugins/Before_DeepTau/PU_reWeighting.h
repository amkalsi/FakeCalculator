
/*
.L PU_reWeighting.C+
PU_2018_Rereco::MC_pileup_weight(int NumTrueInteraction, string mc, string data_scale)
Possible string mc and string data_scale list below:
DYToLL_mad|TT_2l2nu|WW|ZZ|WZ|Data_2018AtoD|TT_semilep|TT_had|
*/

#include <map>
#include <iostream>
namespace PU_2018_Rereco{

double DYToLL_mad[100]={

4.695341e-10, 1.206213e-06, 1.162593e-06, 6.118058e-06, 1.626767e-05,
     3.508135e-05, 7.12608e-05, 0.0001400641, 0.0002663403, 0.0004867473,
     0.0008469, 0.001394142, 0.002169081, 0.003198514, 0.004491138,
     0.006036423, 0.007806509, 0.00976048, 0.0118498, 0.01402411,
     0.01623639, 0.01844593, 0.02061956, 0.02273221, 0.02476554,
     0.02670494, 0.02853662, 0.03024538, 0.03181323, 0.03321895,
     0.03443884, 0.035448, 0.03622242, 0.03674106, 0.0369877,
     0.03695224, 0.03663157, 0.03602986, 0.03515857, 0.03403612,
     0.0326868, 0.03113936, 0.02942582, 0.02757999, 0.02563551,
     0.02362497, 0.02158003, 0.01953143, 0.01750863, 0.01553934,
     0.01364905, 0.01186035, 0.01019246, 0.008660705, 0.007275915,
     0.006043917, 0.004965276, 0.004035611, 0.003246373, 0.002585932,
     0.002040746, 0.001596402, 0.001238498, 0.0009533139, 0.0007282885,
     0.000552306, 0.0004158005, 0.0003107302, 0.0002304612, 0.0001696012,
     0.0001238161, 8.96531e-05, 6.438087e-05, 4.585302e-05, 3.23949e-05,
     2.271048e-05, 1.580622e-05, 1.09286e-05, 7.512748e-06, 5.140304e-06,
     3.505254e-06, 2.386437e-06, 1.625859e-06, 1.111865e-06, 7.663272e-07,
     5.350694e-07, 3.808318e-07, 2.781785e-07, 2.098661e-07, 1.642811e-07,
     1.312835e-07, 1.081326e-07, 9.141993e-08, 7.890983e-08, 6.91468e-08,
     6.119019e-08, 5.443693e-08, 4.85036e-08, 4.31486e-08, 3.822112e-08



};

double Data_2018AtoD[100]={
4.85368e-06,
1.70379e-05,
5.19884e-05,
0.000113575,
0.000200037,
0.000310418,
0.000457559,
0.000665681,
0.000941157,
0.00130364,
0.00181599,
0.00254148,
0.00353352,
0.00483268,
0.0064739,
0.00849167,
0.0109048,
0.0136925,
0.0167739,
0.0200004,
0.0231712,
0.0260771,
0.0285613,
0.0305666,
0.0321396,
0.0333905,
0.0344407,
0.0353868,
0.0362834,
0.0371439,
0.0379483,
0.0386561,
0.0392173,
0.0395783,
0.0396825,
0.0394711,
0.0388848,
0.0378711,
0.0363948,
0.0344489,
0.0320619,
0.0292995,
0.0262598,
0.0230632,
0.0198385,
0.0167099,
0.0137836,
0.0111397,
0.00882798,
0.00686772,
0.00525223,
0.00395519,
0.00293809,
0.00215698,
0.0015678,
0.00113006,
0.000808832,
0.000575392,
0.000407022,
0.0002863,
0.000200167,
0.000138999,
9.57827e-05,
6.54331e-05,
4.42746e-05,
2.96509e-05,
1.96433e-05,
1.28693e-05,
8.33732e-06,
5.34168e-06,
3.38556e-06,
2.12346e-06,
1.31857e-06,
8.10921e-07,
4.94103e-07,
2.98344e-07,
1.78532e-07,
1.05874e-07,
6.22077e-08,
3.62025e-08,
2.08584e-08,
1.18919e-08,
6.70502e-09,
3.73665e-09,
2.05707e-09,
1.11804e-09,
5.99629e-10,
3.17186e-10,
1.6541e-10,
8.50069e-11,
4.30364e-11,
2.1457e-11,
1.05326e-11,
5.08894e-12,
2.41964e-12,
1.13194e-12,
5.20924e-13,
2.35798e-13,
1.0497e-13,
4.59521e-14
};

double Data_2018AtoD_Down[100]={
4.759494e-06,
1.849770e-05,
5.994646e-05,
1.336064e-04,
2.368150e-04,
3.684732e-04,
5.519442e-04,
8.102737e-04,
1.153342e-03,
1.632367e-03,
2.332688e-03,
3.325440e-03,
4.666161e-03,
6.394636e-03,
8.549071e-03,
1.115562e-02,
1.419842e-02,
1.758858e-02,
2.114804e-02,
2.462601e-02,
2.776109e-02,
3.037140e-02,
3.241841e-02,
3.399566e-02,
3.525925e-02,
3.635753e-02,
3.739031e-02,
3.839744e-02,
3.936783e-02,
4.025525e-02,
4.099594e-02,
4.151938e-02,
4.175217e-02,
4.161915e-02,
4.104726e-02,
3.997403e-02,
3.836071e-02,
3.620486e-02,
3.354841e-02,
3.047760e-02,
2.711496e-02,
2.360506e-02,
2.009751e-02,
1.673104e-02,
1.361998e-02,
1.084588e-02,
8.454767e-03,
6.458639e-03,
4.841420e-03,
3.567019e-03,
2.587800e-03,
1.852135e-03,
1.310165e-03,
9.174706e-04,
6.368005e-04,
4.384053e-04,
2.994270e-04,
2.028201e-04,
1.361538e-04,
9.049870e-05,
5.950061e-05,
3.866187e-05,
2.481038e-05,
1.571798e-05,
9.829209e-06,
6.068142e-06,
3.699561e-06,
2.228417e-06,
1.326794e-06,
7.811923e-07,
4.549813e-07,
2.621602e-07,
1.494330e-07,
8.423910e-08,
4.694298e-08,
2.584391e-08,
1.404676e-08,
7.531859e-09,
3.981165e-09,
2.072926e-09,
1.062492e-09,
5.357512e-10,
2.656146e-10,
1.294122e-10,
6.193601e-11,
2.910659e-11,
1.342697e-11,
6.078304e-12,
2.699627e-12,
1.176149e-12,
5.025795e-13,
2.106309e-13,
8.659475e-14,
3.494489e-14,
1.386510e-14,
5.431563e-15,
2.122213e-15,
8.465707e-16,
3.616290e-16,
1.779869e-16
};


double Data_2018AtoD_Up[100]={
4.067612e-06,
1.396975e-05,
4.341894e-05,
9.813674e-05,
1.752758e-04,
2.740673e-04,
3.997754e-04,
5.749867e-04,
8.093729e-04,
1.112231e-03,
1.528127e-03,
2.116923e-03,
2.927186e-03,
3.998302e-03,
5.358193e-03,
7.033492e-03,
9.047395e-03,
1.140425e-02,
1.407039e-02,
1.695908e-02,
1.992732e-02,
2.279316e-02,
2.537823e-02,
2.756090e-02,
2.931233e-02,
3.069056e-02,
3.180081e-02,
3.275215e-02,
3.362858e-02,
3.447663e-02,
3.530658e-02,
3.610022e-02,
3.682079e-02,
3.742275e-02,
3.785701e-02,
3.807273e-02,
3.801788e-02,
3.764126e-02,
3.689667e-02,
3.575043e-02,
3.418882e-02,
3.222453e-02,
2.989901e-02,
2.728066e-02,
2.445884e-02,
2.153504e-02,
1.861299e-02,
1.578952e-02,
1.314660e-02,
1.074607e-02,
8.627387e-03,
6.807803e-03,
5.284836e-03,
4.040571e-03,
3.046520e-03,
2.268448e-03,
1.670487e-03,
1.218282e-03,
8.810041e-04,
6.323435e-04,
4.507597e-04,
3.192013e-04,
2.245240e-04,
1.568040e-04,
1.086605e-04,
7.465937e-05,
5.082468e-05,
3.425796e-05,
2.285236e-05,
1.508175e-05,
9.846390e-06,
6.359735e-06,
4.064739e-06,
2.571560e-06,
1.610976e-06,
9.996878e-07,
6.146827e-07,
3.745701e-07,
2.262241e-07,
1.354050e-07,
8.030186e-08,
4.716971e-08,
2.743184e-08,
1.578620e-08,
8.984408e-09,
5.054084e-09,
2.808611e-09,
1.540999e-09,
8.343628e-10,
4.456034e-10,
2.346394e-10,
1.217727e-10,
6.226604e-11,
3.136021e-11,
1.555329e-11,
7.594269e-12,
3.649959e-12,
1.726477e-12,
8.036228e-13,
3.680718e-13
};
const std::map<string,double*>::value_type init_value[] ={
std::map<string,double*>::value_type( "MC", DYToLL_mad),
std::map<string,double*>::value_type( "Data_2018AtoD", Data_2018AtoD),
std::map<string,double*>::value_type( "Data_2018AtoD_Up", Data_2018AtoD_Up),
std::map<string,double*>::value_type( "Data_2018AtoD_Down", Data_2018AtoD_Down),
};
const static std::map<string,double*> map_pu(init_value, init_value+4);

double MC_pileup_weight(int NumTrueInteraction, string mc, string data_scale){
if (NumTrueInteraction < 0 || NumTrueInteraction > 100 ) return 1;
map<string,double*>::const_iterator iter_mc   = map_pu.find(mc);
map<string,double*>::const_iterator iter_data = map_pu.find(data_scale);
if(iter_mc != map_pu.end() && iter_data != map_pu.end()) {return iter_mc->second[NumTrueInteraction]!=0 ? double(iter_data->second[NumTrueInteraction]/iter_mc->second[NumTrueInteraction]) : 1 ;}
else {std::cout<<"no "<<mc<<" or no "<<data_scale<<std::endl;return  1;}
}
}

